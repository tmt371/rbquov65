第一份文件：介面視覺鎖定框架法則 (v1.0)


文件目的

本文件定義了一套所有開發者（AI或人類）在參與本專案時，都必須嚴格遵守的框架法則。其核心目標是在進行任何功能邏輯的重構或新增時，確保專案既有的介面外觀、尺寸與視覺細節的穩定性與一致性，杜絕因後端邏輯修改而意外破壞前端視覺呈現的問題。

法則一：HTML 結構完整性法則

規則：除非獲得專案所有人的明確許可，否則禁止對 index.html 中所有帶有 id 屬性的元素，以及構成應用程式主要佈局的結構性 class（例如 .app-container, .main-content, .results-table, .panel-grid 等），進行任何新增、刪除、或順序調換。
理由：HTML 是介面的骨架。鎖定骨架的完整性，是防止因邏輯修改而導致佈局意外崩塌的第一道防線。

法則二：CSS 樣式唯一性法則

規則：所有關於外觀、尺寸、顏色、字體、佈局的視覺樣式，都必須且只能在 style.css 檔案中進行定義。嚴禁在 .js 檔案中，使用行內樣式 (element.style.color = 'red') 或任何直接修改樣式屬性的方式來改變介面外觀。
理由：這確保了「功能邏輯」與「視覺呈現」的徹底分離。JavaScript 的任務是處理業務、管理狀態，而不是決定一個按鈕應該是什麼顏色。這讓視覺風格的維護變得極其單純。

法則三：Class 狀態驅動法則

規則：JavaScript 與 CSS 之間唯一的互動方式，是透過新增或移除一組預先在 style.css 中定義好的「狀態 Class」 來實現。所有動態的視覺變化，都必須對應到一個明確的 Class。
理由：這為 UI 的動態變化建立了一個清晰、可控的「API」。我們明確知道，JavaScript 只能扮演「開關」的角色（切換 Class），而不能扮演「設計師」的角色（動態創造樣式）。
範例：.is-expanded, .is-collapsed, .active, .disabled, .active-input-cell, .selected-row-highlight 等，都是系統中既有的「狀態 Class」。

法則四：視覺影響評估強制執行法則

規則：此法則為最高優先級的執行規則。在提交任何程式碼修改前，開發者提交的「連動背景審核報告」中，必須包含「視覺影響評估」 章節。
理由：這是一個強制性的檢查點，確保在動手修改任何程式碼之前，都已對其視覺影響進行了審慎評估和透明溝通，並以此來約束以上所有法則的遵守。

第二份文件：開發工作流程與原則 (v1.0)


文件目的

本文件旨在定義開發者（AI或人類）在參與本專案時，所需遵循的工作原則與合作流程。其核心目標是確保每一次的程式碼修改都建立在充分溝通與完整理解的基礎之上，以實現專案的穩定迭代。

原則一：最小干預原則 (Principle of Minimal Intervention)

定義：開發者只應修改與當前被指派的任務直接相關的檔案和程式碼。
舉例：如果一項任務是為了修正計價邏輯（位於 calculation-service.js），則開發者不應改動 style.css 或 index.html。

原則二：主動分離與詢問 (Proactive Separation & Inquiry)

定義：「功能邏輯」(.js) 與「視覺呈現」(.css, .html) 應被視為兩個獨立的領域。
執行：如果開發者判斷，一項邏輯上的修改有可能會對視覺呈現產生影響，則必須主動停止編修，並向專案所有人提出詢問，在獲得明確許可後才能繼續。

流程一：升級版合作流程

定義：此流程是對「規則三：逐檔執行與連動審核」的強制性升級。
執行：開發者提交的每一份「連動背景審核報告」中，都必須包含一個名為「視覺影響評估」的章節。
若無影響，必須明確標註：「視覺影響評估：無。本次修改僅涉及 .js 檔案的內部業務邏輯，專案介面的所有外觀、尺寸與視覺細節將保持不變。」
若有影響，必須明確標註：「視覺影響評估：有。」並詳細列出將受影響的檔案與修改內容，同時必須在獲得專案所有人的明確許可後，才能繼續執行。
